<<<<<<<               <<<Java>>>>         >>>>>>
import java.util.ArrayList; 
import java.util.List; 
class Subject 
{ 
 private List<Observer>observers=new ArrayList<Observer>(); 
 private int state; 
 public int getState() 
 { 
 return state; 
 } 
 public void setState(int s) 
 { 
 this.state=s; 
 notifyAllObservers(); 
 } 
 
 public void attach (Observer o1) 
 { 
 observers.add(o1); 
 } 
 public void notifyAllObservers() 
 { 
 for(Observer o1: observers) 
 { 
 o1.update(); 
 } 
 } 
} 
abstract class Observer 
{ 
protected Subject s1; 
public abstract void update(); 
} 
class BinaryObserver extends Observer 
 { 
 public BinaryObserver(Subject s) 
 { 
 this.s1=s; 
 this.s1.attach(this); 
 } 
 public void update() 
 { 
 System.out.println("Binary String:" +Integer.toBinaryString(s1.getState())); 
 } 
} 
class OctalObserver extends Observer 
 { 
 public OctalObserver(Subject s) 
 { 
 this.s1=s; 
 this.s1.attach(this); 
 } 
 public void update() 
 { 
 System.out.println("Octal String:" +Integer.toOctalString(s1.getState())); 
 } 
} 
class HexaObserver extends Observer 
 { 
 public HexaObserver(Subject s) 
 { 
 this.s1=s; 
 this.s1.attach(this); 
 } 
 public void update() 
 { 
 System.out.println("Heaxdeciamal String:" +Integer.toHexString(s1.getState())); 
 } 
} 
public class Main 
{ 
 public static void main(String [] args) 
 { 
 Subject s1=new Subject(); 
 new BinaryObserver(s1); 
 new OctalObserver(s1); 
 new HexaObserver(s1); 
 System.out.println("First state Change:15"); 
 s1.setState(15); 
 System.out.println("Second state Change:10"); 
 s1.setState(10); 
 } 
} 

<<<<<<<                < M    L >                  >>>>>
ML- Linear regression for predicting house price

import numpy as np

def predict(x, weights):
    return weights[0] + (weights[1] * x)

def train(x, y, epochs, learning_rate):
    weights = [0, 0]
    for epoch in range(epochs):
        for i in range(len(x)):
            prediction = predict(x[i], weights)
            error = prediction - y[i]
            weights[0] = weights[0] - (learning_rate * error)
            weights[1] = weights[1] - (learning_rate * error * x[i])
    return weights
x = [1500, 1600, 1700, 1750, 1800]
y = [245000, 275000, 300000, 310000, 350000]

weights = train(x, y, epochs=100, learning_rate=0.00001)

house_size = 1850
predicted_price = predict(house_size, weights)
print(f"The predicted price for a house with size {house_size} sq ft is ${predicted_price:.2f}")

Output:

The predicted price for a house with size 1850 sq ft is $nan





<<<<<<<<<<          WebFrameWork         >>>>>>>>>>

Main.js 
// Import events module 
var events = require('events'); 
 
// Create an eventEmitter object var eventEmitter = new events.EventEmitter(); 
 
// Create an event handler as follows var connectHandler = function connected() {    console.log('connection succesful.'); 
   
   // Fire the data_received event     eventEmitter.emit('data_received'); 
} 
 
// Bind the connection event with the handler eventEmitter.on('connection', connectHandler); 
  
// Bind the data_received event with the anonymous function eventEmitter.on('data_received', function() {    console.log('data received succesfully.'); 
}); 
 
// Fire the connection event  eventEmitter.emit('connection'); 
 console.log("Program Ended."); 
 


