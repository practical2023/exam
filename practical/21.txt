slip 21
Write a Java Program to implement command pattern to test Remote Control 
interface Command { 
 public void execute(); 
} 
class Light { 
 public void on(){ 
 System.out.println("Light is on"); 
 } 
 public void off() 
 { 
 System.out.println("Light is off"); 
 } 
} 
 class LightOnCommand implements Command { 
 Light l1; 
 
 public LightOnCommand(Light a) { 
 this.l1 = a; 
 } 
 public void execute() { 
 l1.on(); 
 } 
 } 
 class LightOffCommand implements Command { 
Light l1; 
public LightOffCommand(Light a) { 
this.l1 = a; 
} 
public void execute() { 
l1.off(); 
} 
} 
 class SimpleRemoteControl { 
 Command slot; 
  public SimpleRemoteControl() {} 
 public void setCommand(Command command) { 
 slot = command; 
 } 
  public void buttonWasPressed() { 
 slot.execute(); 
 } 
 } 
public class Main { 
 public static void main(String[] args) { 
 SimpleRemoteControl r1 = new SimpleRemoteControl(); 
 Light l1 = new Light(); 
 
LightOnCommand lo = new LightOnCommand(l1); 
 r1.setCommand(lo); 
 r1.buttonWasPressed(); 
LightOffCommand lO = new LightOffCommand(l1); 
r1.setCommand(lO); 
r1.buttonWasPressed(); 
 } 
} 

Machine Learning
Linear SVM
from sklearn import datasets 
#Load dataset 
cancer = datasets.load_breast_cancer() 
# print the names of the 13 features 
print("Features: ", cancer.feature_names) 
# print the label type of cancer('malignant' 'benign') 
print("Labels: ", cancer.target_names) 
# print data(feature)shape 
cancer.data.shape 
# print the cancer data features (top 5 records) 
print(cancer.data[0:5]) 
# print the cancer labels (0:malignant, 1:benign) 
print(cancer.target) 
# Import train_test_split function 
from sklearn.model_selection import train_test_split 
# Split dataset into training set and test set 
X_train, X_test, y_train, y_test = train_test_split(cancer.data, cancer.target, 
test_size=0.3,random_state=109) # 70% training and 30% test 
#Import svm model 
from sklearn import svm 
#Create a svm Classifier 
clf = svm.SVC(kernel='linear') # Linear Kernel 
#Train the model using the training sets 
clf.fit(X_train, y_train) 
#Predict the response for test dataset 
y_pred = clf.predict(X_test) 
#Import scikit-learn metrics module for accuracy calculation 
from sklearn import metrics 
# Model Accuracy: how often is the classifier correct? 
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

Web Framework

