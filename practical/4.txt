//Slip-4
//SADP-Pizza

import java.util.ArrayList;

class chicagoPizzaStore extends pizzaStore
{
    Pizza createPizza(String item)
    {
        if(item.equals("cheese"))
        {
            return new ChicagoStyleCheesePizza();
        }
        else return null;
    }
}

class  chicagoStyleCheesePizza extends pizza
{
    public  chicagoStyleCheesePizza()
    {
        name= "Chicago Style Deep Dish CheesePizza";
        dough="Extra thik crust dough";
        sauce="Tomato Sauce";
        topping.add("dhredded Mazzarela Cheese");
    }
    void cut()
    {
        System.out.println("Cutting the pizza into sqaure slices");
    }
}


class Dependent pizzaStore
{
    public Pizza createPizza(String style, String type)
    {
        if(style.equls("NY"))
        {
            if(type.equals("Cheese"))
            {
                pizza=new NyStyleCheesepizza();
            }
        }
        
        if(style.equls("chicago"))
        {
            if(type.equals("Cheese"))
            {
                pizza=new chicagoStyleCheesePizza();
            }
        }
        else
        {
            System.out.println("Error:Invalid type of pizza");
            return null;
        }
        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();
        return pizza;
    }
}
        
    class NyPizzaStore extends pizzaStore
{
    Pizza createPizza(String item)
    {
        if(item.equals("cheese"))
        {
            return new NyStyleCheesePizza();
        }
        else return null;
    }
}

class  NyStyleCheesePizza extends pizza
{
    public  NyStyleCheesePizza()
    {
        name= "Ny Style Deep Dish CheesePizza";
        dough="Extra thik crust dough";
        sauce="Tomato Sauce";
        topping.add("dhredded Mazzarela Cheese");
    }
    void cut()
    {
        System.out.println("Cutting the pizza into sqaure slices");
    }
}


abstract class pizza
{
    String name;
    String dough;
    String sauce;
    ArrayList toppings=new ArrayList();
    
    void prepare()
    {
        System.out.println("preparing" + name);
        System.out.println("tossing dough...");
        System.out.println("Adding sauce...");
        System.out.println("Adding toppings:");
        
        for(int i=0; i<topping.size();i++)
        {
            System.out.println(" "+topping.get(i));
        }
    }
    
    void bake()
    {
        System.out.println("bake for 25 minutes at 350");
    }
    
    void cut()
    {
        System.out.println("Cutting pizza into diagonal size");
    }
    
    void box()
    {
        System.out.println("place pizza in official store box");
    }
    
    
    public String getName()
    {
        return name;
    }
    
    
    public String toString()
    {
        String Bufferdisplay=new StringBuffer();
        display.append("...."+ name +"...\n");
        display.append("dough"+ "\n");
        display.append("sauce"+"\n");
        
        for(int i;i<topping.size;i++)
        {
            display.append((String) toppings.get(i)+"\n");
        }
        return display.toString();
    }
}
    
    abstract class pizzaStore
    {
         abstract Pizza createPizza(String item);
         public Pizza orderPizza(string type)
         {
             Pizza pizza = createPizza(type);
             System.out.println("... Making a"+ Pizza.getName()+"...");
              pizza.prepare();
              pizza.bake();
              pizza.cut();
              pizza.box();
              return pizza;
    }
}
        
        public class Main 
        {
        public static void main (String[] args)
        {
            pizzaStore nyStore=new NyPizzaStore();
            pizzaStore chicagoStore=new chicagoPizzaStore();
            
            Pizza pizza=nyStore.orderPizza("cheese");
            
            System.out.println("Punam ordered a"+ pizza.getName()+"\n");
            pizza=chicagoStore.orderPizza("Cheese");
            
            
            System.out.println("Rutuja ordered a"+ pizza.getName()+"\n");
            pizza=NyStore.orderPizza("Cheese");
        }
        }

// ML- Linear regression for predicting house price

import numpy as np

def predict(x, weights):
    return weights[0] + (weights[1] * x)

def train(x, y, epochs, learning_rate):
    weights = [0, 0]
    for epoch in range(epochs):
        for i in range(len(x)):
            prediction = predict(x[i], weights)
            error = prediction - y[i]
            weights[0] = weights[0] - (learning_rate * error)
            weights[1] = weights[1] - (learning_rate * error * x[i])
    return weights
x = [1500, 1600, 1700, 1750, 1800]
y = [245000, 275000, 300000, 310000, 350000]

weights = train(x, y, epochs=100, learning_rate=0.00001)

house_size = 1850
predicted_price = predict(house_size, weights)
print(f"The predicted price for a house with size {house_size} sq ft is ${predicted_price:.2f}")

Output:

The predicted price for a house with size 1850 sq ft is $nan

//WEB Fremwork-Node.js file convert the o/p "hello world" into Uppercase.

var http=require('http');
var uc=require('upper-case');
http.createServer(function(req,res)
{
  res.writeHead(200,
{
 'content-Type':text/html'
});
  res.write(uc.uppercase("Hello world!"));
  res.end();
}).listen(8080);


