slip 27
SADP
Write a Java Program to implement Abstract Factory Pattern for Shape interface 
interface Shape 
{ 
void draw(); 
} 
class RoundedRectangle implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside RR"); 
 } 
} 
class RoundedSquare implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside RS"); 
 } 
} 
class Rectangle implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside Simple R"); 
 } 
} 
class Square implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside Simple Sq"); 
 } 
} 
abstract class AbstractFactory 
{ 
 abstract Shape getShape( String st); 
} 
class ShapeFactory extends AbstractFactory 
{ 
 public Shape getShape( String st) 
 { 
 if(st.equalsIgnoreCase("Rectangle")) 
 { return new Rectangle();} 
 else if(st.equalsIgnoreCase("Square")) 
 { return new Square();} 
 return null; 
 } 
} 
class RoundedShapeFactory extends AbstractFactory 
{ 
 public Shape getShape( String st) 
 { 
 if(st.equalsIgnoreCase("Rectangle")) 
 { return new RoundedRectangle();} 
 else if(st.equalsIgnoreCase("Square")) 
 { return new RoundedSquare();} 
 return null; 
 } 
} 
class FactoryProducer 
{ 
 public static AbstractFactory getFactory(boolean rounded) 
 { 
 if (rounded) 
 { return new RoundedShapeFactory();} 
 else 
 { return new ShapeFactory();} 
 } 
} 
public class Main 
{ 
 public static void main(String[]args) 
 { 
 AbstractFactory shapeFactory=FactoryProducer.getFactory(false); 
 Shape shape1=shapeFactory.getShape("Rectangle"); 
 shape1.draw(); 
 Shape shape2=shapeFactory.getShape("SQuare"); 
 shape2.draw(); 
 
 AbstractFactory shapeFactory1=FactoryProducer.getFactory(true); 
 Shape shape3=shapeFactory1.getShape("REctangle"); 
 shape3.draw(); 
 
 Shape shape4=shapeFactory1.getShape("square"); 
 shape4.draw(); 
 } 
} 
Machine Learning
multiple regression 
# implementation of multiple regression on given dataset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn import preprocessing
df = pd.read_csv('D:\Real-estate1.csv')
df.drop('No', inplace = True,axis=1)
 
print(df.head())
print(df.columns)
sns.scatterplot(x='X4 number of convenience stores',
 y='Y house price of unit area', data=df)
X = df.drop('Y house price of unit area',axis= 1)
y = df['Y house price of unit area']
print(X)
print(y)
X_train, X_test, y_train, y_test = train_test_split(
 X, y, test_size=0.3, random_state=101)
model = LinearRegression()
model.fit(X_train,y_train)
predictions = model.predict(X_test)
print( 'mean_squared_error : ', mean_squared_error(y_test, predictions))
print( 'mean_absolute_error : ', mean_absolute_error(y_test, predictions))


